// Importa bibliotecas necess√°rias
import notifier from "node-notifier"; // Biblioteca para mostrar notifica√ß√µes na √°rea de trabalho
import open from "open"; // Abre URLs no navegador padr√£o
import path from "path"; // Manipula caminhos de diret√≥rios
import { fileURLToPath } from "url"; // Converte a URL do arquivo para um caminho tradicional
import mysql from "mysql2/promise"; // Cliente MySQL moderno com suporte a async/await

// Adaptando para ES Modules, pois __dirname n√£o est√° dispon√≠vel nativamente
const __filename = fileURLToPath(import.meta.url); // Caminho completo do arquivo atual
const __dirname = path.dirname(__filename); // Nome da pasta onde o arquivo est√°

// Caminho absoluto para o √≠cone que ser√° usado na notifica√ß√£o
const iconPath = path.join(__dirname, "/download.ico");

// Fun√ß√£o principal para verificar as solicita√ß√µes pendentes
async function verificarSolicitacoes() {
  let connection; // Vari√°vel que vai guardar a conex√£o com o banco de dados
  try {
    // Estabelece conex√£o com o banco de dados MySQL
    connection = await mysql.createConnection({
      host: "192.168.0.17", // Endere√ßo do banco de dados
      user: "connectdl",    // Nome do usu√°rio de acesso
      password: "123456",   // Senha desse usu√°rio
      database: "glpi10",   // Nome do banco que ser√° acessado
    });

    // Executa uma consulta SQL para encontrar solicita√ß√µes pendentes de valida√ß√£o para o usu√°rio ID 8
    const [rows] = await connection.execute(`
      SELECT b.tickets_id,
             a.name,
             CASE a.status
               WHEN 1 THEN 'Novo'
               WHEN 2 THEN 'Em andamento (atribu√≠do)'
               WHEN 3 THEN 'Em andamento (planejado)'
               WHEN 4 THEN 'Pendente'
               WHEN 5 THEN 'Resolvido'
               WHEN 6 THEN 'Fechado'
               ELSE 'Desconhecido'
             END AS status_descricao,
             b.users_id_validate,
             c.name
      FROM glpi_tickets a,
           glpi_ticketvalidations b,
           glpi_users c
      WHERE a.id = b.tickets_id
        AND b.users_id_validate = c.id
        AND a.status = 2
        AND b.validation_date IS NULL
        AND b.users_id_validate = 8;
    `);

    // Conta o total de solicita√ß√µes encontradas
    const totalSolicitacoes = rows.length;

    // Define a mensagem da notifica√ß√£o conforme o n√∫mero de resultados
    let mensagem = "";
    if (totalSolicitacoes === 1) {
      mensagem = "Existe 1 solicita√ß√£o em aberto!";
    } else {
      mensagem = `Existem ${totalSolicitacoes} solicita√ß√µes em aberto!`;
    }

    // Se houver solicita√ß√µes, dispara a notifica√ß√£o visual
    if (totalSolicitacoes > 0) {
      notifier.notify({
        title: "üîî Solicita√ß√µes Abertas",
        message: mensagem,
        sound: true,         // Faz som ao exibir
        icon: iconPath,      // Exibe o √≠cone personalizado
        timeout: 10,         // Some ap√≥s 10 segundos
        // wait: true,       // Voc√™ pode ativar isso se quiser que a execu√ß√£o espere por uma a√ß√£o
      });

      // Se o usu√°rio clicar na notifica√ß√£o, abre o link do GLPI
      notifier.on("click", () => {
        open("http://mp.uniforca.com.br/front/central.php");
      });

      // Caso o tempo da notifica√ß√£o acabe sem intera√ß√£o
      notifier.on("timeout", () => {
        console.log("Notifica√ß√£o fechada sem intera√ß√£o.");
      });
    } else {
      console.log("Nenhuma solicita√ß√£o aberta no momento.");
    }

  } catch (err) {
    // Em caso de erro na conex√£o ou execu√ß√£o da query
    console.error("Erro ao verificar solicita√ß√µes:", err);
  } finally {
    // Garante que a conex√£o com o banco ser√° encerrada
    if (connection) {
      await connection.end();
    }
  }
}

// Executa a fun√ß√£o de verifica√ß√£o a cada 5 minutos (300.000 milissegundos)
setInterval(verificarSolicitacoes, 300000);

// Tamb√©m executa a verifica√ß√£o imediatamente ao iniciar o script
verificarSolicitacoes();
